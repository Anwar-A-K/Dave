// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var apiResponse = ApiResponse.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ApiResponse
    {
        [JsonProperty("hide_in_customer_history", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideInCustomerHistory { get; set; }

        [JsonProperty("registered_entities")]
        public object RegisteredEntities { get; set; }

        [JsonProperty("whiteboard_template", NullValueHandling = NullValueHandling.Ignore)]
        public string WhiteboardTemplate { get; set; }

        [JsonProperty("customer_state", NullValueHandling = NullValueHandling.Ignore)]
        public string CustomerState { get; set; }

        [JsonProperty("placeholder_aliases", NullValueHandling = NullValueHandling.Ignore)]
        public PlaceholderAliases PlaceholderAliases { get; set; }

        [JsonProperty("show_feedback", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowFeedback { get; set; }

        [JsonProperty("to_state_function", NullValueHandling = NullValueHandling.Ignore)]
        public ToStateFunction ToStateFunction { get; set; }

        [JsonProperty("placeholder", NullValueHandling = NullValueHandling.Ignore)]
        public string Placeholder { get; set; }

        [JsonProperty("show_in_history", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowInHistory { get; set; }

        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public Data Data { get; set; }

        [JsonProperty("overwrite_whiteboard", NullValueHandling = NullValueHandling.Ignore)]
        public bool? OverwriteWhiteboard { get; set; }

        [JsonProperty("start_timestamp", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? StartTimestamp { get; set; }

        [JsonProperty("console", NullValueHandling = NullValueHandling.Ignore)]
        public string Console { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("response_channels", NullValueHandling = NullValueHandling.Ignore)]
        public ResponseChannels ResponseChannels { get; set; }

        [JsonProperty("whiteboard", NullValueHandling = NullValueHandling.Ignore)]
        public string Whiteboard { get; set; }

        [JsonProperty("state_options", NullValueHandling = NullValueHandling.Ignore)]
        public StateOptions StateOptions { get; set; }

        [JsonProperty("response_id", NullValueHandling = NullValueHandling.Ignore)]
        public Guid? ResponseId { get; set; }

        [JsonProperty("whiteboard_title", NullValueHandling = NullValueHandling.Ignore)]
        public string WhiteboardTitle { get; set; }

        [JsonProperty("timestamp", NullValueHandling = NullValueHandling.Ignore)]
        public string Timestamp { get; set; }

        [JsonProperty("maintain_whiteboard", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MaintainWhiteboard { get; set; }

        [JsonProperty("wait", NullValueHandling = NullValueHandling.Ignore)]
        public long? Wait { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("options")]
        public object Options { get; set; }

        [JsonProperty("engagement_id", NullValueHandling = NullValueHandling.Ignore)]
        public string EngagementId { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("slideshow", NullValueHandling = NullValueHandling.Ignore)]
        public Slideshow[] Slideshow { get; set; }
    }

    public partial class Slideshow
    {
        [JsonProperty("image", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Image { get; set; }

        [JsonProperty("caption", NullValueHandling = NullValueHandling.Ignore)]
        public string Caption { get; set; }
    }

    public partial class PlaceholderAliases
    {
    }

    public partial class ResponseChannels
    {
        [JsonProperty("voice", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Voice { get; set; }

        [JsonProperty("frames", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Frames { get; set; }

        [JsonProperty("shapes", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Shapes { get; set; }
    }

    public partial class StateOptions
    {
        [JsonProperty("cs_top_three", NullValueHandling = NullValueHandling.Ignore)]
        public string CsTopThree { get; set; }

        [JsonProperty("cs_must_have", NullValueHandling = NullValueHandling.Ignore)]
        public string CsMustHave { get; set; }

        [JsonProperty("cs_enquiry", NullValueHandling = NullValueHandling.Ignore)]
        public string CsEnquiry { get; set; }

        [JsonProperty("cs_mt1", NullValueHandling = NullValueHandling.Ignore)]
        public string CsMt1 { get; set; }

        [JsonProperty("cs_mt2", NullValueHandling = NullValueHandling.Ignore)]
        public string CsMt2 { get; set; }

        [JsonProperty("cs_mt3", NullValueHandling = NullValueHandling.Ignore)]
        public string CsMt3 { get; set; }
    }

    public partial class ToStateFunction
    {
        [JsonProperty("function", NullValueHandling = NullValueHandling.Ignore)]
        public string Function { get; set; }
    }

    public partial class ApiResponse
    {
        public static ApiResponse FromJson(string json)
        {
            return JsonConvert.DeserializeObject<ApiResponse>(json, QuickType.Converter.Settings);
        }
    }

    public static class Serialize
    {
        public static string ToJson(this ApiResponse self)
        {
            return JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        }
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
